<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <!-- http://joe.blog.freemansoft.com -->
  <configSections>
    <!-- configure log4net using this file -->
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net"/>
    <!-- configure spring.net using this file -->
    <sectionGroup name="spring">
      <section name="context" type="Spring.Context.Support.ContextHandler, Spring.Core"/>
      <section name="objects" type="Spring.Context.Support.DefaultSectionHandler, Spring.Core"/>
    </sectionGroup>
  </configSections>


  <!-- *********************************************************************** -->
  <!-- log4net configuration so we don't have to have separate file -->
  <!-- *********************************************************************** -->
  <log4net>
    <appender name="Console" type="log4net.Appender.ConsoleAppender">
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%date [%thread] %-5level %logger - %message%newline"/>
      </layout>
    </appender>
    <appender name="RollingFile" type="log4net.Appender.RollingFileAppender">
      <file value="example.log"/>
      <appendToFile value="true"/>
      <maximumFileSize value="100KB"/>
      <maxSizeRollBackups value="2"/>
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%level %thread %logger - %message%newline"/>
      </layout>
    </appender>
    <root>
      <level value="Info"/>
      <appender-ref ref="Console"/>
      <appender-ref ref="RollingFile"/>
    </root>
  </log4net>
  
  <appSettings>
    <!-- ***********************************************************************
          TFS connection and filtering
          The list of TFS collection and projects that are monitored is defined below in "myBuildAdapters"
          
          pause times are milliseconds
          BetweenRequestsMsec is the puse between query.  
          So if there were 4 sets of builds being monitored then the total cycle time is 4*(BetweenRequestsMsec+queryTime)
         *********************************************************************** -->
    <add key="Tfs.Pause.BetweenRequestsMsec" value="15000"/>
    <add key="Tfs.Pause.AfterExceptionsMsec" value="5000"/>

    <!-- these comment blocks exist because the auther comments this out and pastes in his connection information while testing -->
    <!-- --> 
    <add key="Tfs.Url" value="https://tfs.yourdomain.net/tfs/yourcollection"/>
    <add key="Tfs.Username" value="userid"/>
    <add key="Tfs.Password" value="password"/>
    <add key="Tfs.Domain" value="your_ad_domain"/>
    <!-- you can put yours below this line it is parsed top to botton -->

    <!-- 
          device communication configuration
          These values are fed into the com port device object down below via the property mapper
          Joe's test setup: test rig has arduino on COM7 and Freemometer on COM2 at home CheapLaunchpadMSP430 on COM? NeoPixel COM8
          Joe's prod setup:  Arduino with 4 lights on COM5
          CheapLaunchpadMSP430 actual speed is 9600 but can be set at 19200 because Serial over USB masks that on my PC
          Arduino NeoPixel max speed is 9600
          
          These values are ignored for USB HID or ethernet based devices
         *********************************************************************** -->
    <add key="Device.Serial.ComPort" value="COM3"/>
    <add key="Device.Serial.DataRate" value="9600"/>

    <!--- ***********************************************************************
          defines the url when we are using an ethernet based device vs a serial device
          *********************************************************************** -->
    <add key="Device.Uri" value="http://Arduino_LED.local/"/>

    <!-- ***********************************************************************
          defines the physical device driver class that drives the lights
          valid devices are "ArduinoDualRGB" and "Freemometer", "CheapLaunchpadMSP430" or "SimulatedDevice"  "ArduinoEthernetLEDStrip"
          as defined below in their own spring objects
          *********************************************************************** -->
    <add key="Device.Class" value="ArduinoNeoPixel"/>
    
    <!-- ***********************************************************************
         remember to set the build set matching patterns down below probably "myBuildAdapters"
         they are not externally overridable yet because I haven't figured out how to create the collection with overrides
         *********************************************************************** -->

    <!-- ***********************************************************************
         microsoft web property.  most will never touch this
         this lets us override teh values in this key section with external values
         *********************************************************************** -->
    <add key="ClientSettingsProvider.ServiceUri" value=""/>

    <!-- ***********************************************************************
          This key causes the program to start small build status web server on this port
          "+" means all hosts on all paths
          "*" means all hosts on a psecified path
          trailing "/" is required
          YOU MUST ENABLE self hosting with this command *as Administrator*
          netsh http add urlacl url=http://+:8080/ user=machine\username
          You should disable self hosting if you don't run this app any more
          netsh http delete urlacl url=http://+:8080/
          Failure to do this will result in no web services but the app will still run
         *********************************************************************** -->
    <add key="HttpListener.ServiceUri" value="http://+:8080/"/>
  </appSettings>
  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5"/>
  </startup>


  <!-- *********************************************************************** -->
  <!-- spring wiring  -->
  <!-- *********************************************************************** -->
  <spring>

    <context>
      <resource uri="config://spring/objects"/>
    </context>

    <objects xmlns="http://www.springframework.net">
      <description>An  example that demonstrates simple IoC features.</description>

      <!-- ***********************************************************************
           configure spring itself: define where we'd like to do variable replacement from
           *********************************************************************** -->
      <object type="Spring.Objects.Factory.Config.VariablePlaceholderConfigurer, Spring.Core">
        <property name="VariableSources">
          <list>
            <!-- supports arbitrary list of locations we can do variable replacement from -->
            <object type="Spring.Objects.Factory.Config.ConfigSectionVariableSource, Spring.Core">
              <!-- Sections to read, sepearated by comma (leave out spaces) -->
              <property name="SectionNames" value="appSettings"/>
            </object>
          </list>
        </property>
      </object>

      <!-- ***********************************************************************
           main driver program
           specified constructor argument names to make it more obvious what is going on. They are not required
           *********************************************************************** -->
      <object name="myDriverInstance" type="BuildWatcher.BuildWatchDriver, BuildWatcher" lazy-init="true">
        <constructor-arg name="allAdapters" ref="myBuildAdapters"/>
        <constructor-arg name="device" ref="${Device.Class}"/>
        <constructor-arg name="pollPauseBetweenRequestsInMilliseconds" value="${Tfs.Pause.BetweenRequestsMsec}"/>
        <constructor-arg name="exceptionPauseInMilliseconds" value="${Tfs.Pause.AfterExceptionsMsec}"/>
        <!-- <constructor-arg name="httpListenerWrapper" ref="myListenerWrapper"/> -->
        <constructor-arg name="httpListenerWrapper">
          <null/>
        </constructor-arg>
      </object>

      <!-- specified constructor argument names to make it more obvious what is going on. They are not required -->
      <!-- singleton that describes the connection to TFS lazy init so we can give better diagnostics in the code-->
      <object name="myBuildServerConnection" type="BuildWatcher.Tfs.TfsBuildConnection, BuildWatcher" lazy-init="true">
        <constructor-arg name="tfsPath" value="${Tfs.Url}"/>
        <constructor-arg name="userId" value="${Tfs.Username}"/>
        <constructor-arg name="password" value="${Tfs.Password}"/>
        <constructor-arg name="domain" value="${Tfs.Domain}"/>
      </object>


      <!-- There is one build adapter for each light, each group of builds monitored as a group-->
      <!-- this is set up with lazy-init=true because we let the program first verify the server connection before bringing everyithing up -->
      <object id="myBuildAdapters" type="System.Collections.Generic.List&lt;BuildWatcher.Tfs.TfsBuildAdapter&gt;" lazy-init="true">
        <constructor-arg name="collection">
          <list element-type="BuildWatcher.Tfs.TfsBuildAdapter, BuildWatcher">
            <!--
              You should only enable as many build adapters as you have lights!
              constructor-args are
              TFS Build Server connection
              TFS Team Project name
              TFS Build definition pattern
            -->
            <!-- specified constructor argument names to make it more obvious what is going on. They are not required -->
            <object type="BuildWatcher.Tfs.TfsBuildAdapter, BuildWatcher">
              <constructor-arg name="connection" ref="myBuildServerConnection"/>
              <constructor-arg name="teamProjectName" value="MSI"/>
              <constructor-arg name="definitionNamePattern" value="CI_vNext*"/>
            </object>
            <object type="BuildWatcher.Tfs.TfsBuildAdapter, BuildWatcher">
              <constructor-arg name="connection" ref="myBuildServerConnection"/>
              <constructor-arg name="teamProjectName" value="MSI"/>
              <constructor-arg name="definitionNamePattern" value="V_vNext*"/>
            </object>
            <object type="BuildWatcher.Tfs.TfsBuildAdapter, BuildWatcher">
              <constructor-arg name="connection" ref="myBuildServerConnection"/>
              <constructor-arg name="teamProjectName" value="MSI"/>
              <constructor-arg name="definitionNamePattern" value="P_Main*"/>
            </object>
            <object type="BuildWatcher.Tfs.TfsBuildAdapter, BuildWatcher">
              <constructor-arg name="connection" ref="myBuildServerConnection"/>
              <constructor-arg name="teamProjectName" value="MSI"/>
              <constructor-arg name="definitionNamePattern" value="V_RC*"/>
            </object>
          </list>
        </constructor-arg>
      </object>


      <!-- *********************************************************************** -->
      <!-- device dependent configuration  -->
      <!-- devices must implement IBuildIndicatorDevice -->
      <!-- *********************************************************************** -->

      <!-- using property injection here as a demonstration -->
      <object name="mySerialPort" type="System.IO.Ports.SerialPort, System" lazy-init="true" init-method="Open">
        <property name="PortName" value="${Device.Serial.ComPort}"/>
        <property name="BaudRate" value="${Device.Serial.DataRate}"/>
        <property name="ReadTimeout" value="500"/>
        <property name="WriteTimeout" value="500"/>
        <property name="HandShake" value="None"/>
      </object>

      <!--
      these devices vary from 2-32 lamps
      used to turn off the lamps because the device can't tell you how many it has
      direct USB connected devices reset on connection.  Bluetooth devices do not
      (com port, reset on connect, number of bulbs)
      -->
      <object name="ArduinoDualRGB" type="BuildWatcher.Devices.ArduinoDualRGB, BuildWatcher" lazy-init="true">
        <constructor-arg ref="mySerialPort"/>
        <constructor-arg value="false"/>
        <constructor-arg value="4"/>
      </object>
     <!-- 
      single lamp device with mechanical ringer
      ringer pattern for build failure types. Set to 0 for silence
      This device rings until build is complete! That can be annoying.
      RingTime is in msec. RingTime should be shorter than the polling interval 
      (com port, signal pattern complete failure signal pattern partial failure, ring time on failure)
      -->
      <object name="Freemometer" type="BuildWatcher.Devices.Freemometer, BuildWatcher" lazy-init="true">
        <constructor-arg ref="mySerialPort"/>
        <constructor-arg value="1"/>
        <constructor-arg value="7"/>
        <constructor-arg value="3000"/>
      </object>

      <!-- 
      40 lamp device patterns range from 0..9 - 0 is off and 1 is solid
      Note: LEDs are Adafruit NeoPixel panel 
      (com port, signal pattern complete failure signal pattern partial failure)
      -->
      <object name="ArduinoNeoPixel" type="BuildWatcher.Devices.ArduinoNeoPixel, BuildWatcher" lazy-init="true">
        <constructor-arg name="device" ref="mySerialPort"/>
        <constructor-arg name="signalPatternBuilding" value="6"/>
        <constructor-arg value="40"/>
      </object>

      <!-- 
      single lamp device patterns range from 0..9 - 0 is off and 1 is solid
      Note: Sparkfun bluesmirf bluetooth adapters create two com ports when bound. The first one is the outbound 
      (com port, signal pattern complete failure signal pattern partial failure)
      -->
      <object name="CheapLaunchpadMSP430" type="BuildWatcher.Devices.CheapLaunchpadMSP430, BuildWatcher" lazy-init="true">
        <constructor-arg name="device" ref="mySerialPort"/>
        <constructor-arg name="signalPatternFailureComplete" value="1"/>
        <constructor-arg name="signalPatternFailurePartial" value="7"/>
      </object>

      <!-- 
        Arduino ethernet board with a 1M 30 lamp 3 wire Addressable LED strip
        This board behaves a little differently.  The number of lamps describes how many build status can be displayed
        from a single build set.  It is NOT the numbeer of build sets that can be indicated.
        The unit cycles through the build sets
      -->
      <object name="ArduinoEthernetLEDStrip" type="BuildWatcher.Devices.ArduinoEthernetLEDStrip, BuildWatcher" lazy-init="true">
        <constructor-arg name="uri" value="${Device.Uri}"/>
        <constructor-arg name="numberOfLamps" value="30"/>
      </object>

      <!-- device that just logs for people that want to test but have no hardware -->
      <object name="SimulatedDevice" type="BuildWatcher.Devices.SimulatedDevice, BuildWatcher">
      </object>

    <!-- ***********************************************************************
          http listener related objects - used to create a built in web server with results
         *********************************************************************** -->
      <object name="myListenerWrapper" type="BuildWatcher.Http.HttpListenerWrapper, BuildWatcher" lazy-init="true">
        <constructor-arg name="myListener" ref="HttpListener"/>
        <constructor-arg name="serviceUri" value="${HttpListener.ServiceUri}"/>
      </object>
      <object name="HttpListener" type="System.Net.HttpListener, System"/>
 
  </objects>    
  </spring>


  <system.web>
    <membership defaultProvider="ClientAuthenticationMembershipProvider">
      <providers>
        <add name="ClientAuthenticationMembershipProvider" type="System.Web.ClientServices.Providers.ClientFormsAuthenticationMembershipProvider, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" serviceUri=""/>
      </providers>
    </membership>
    <roleManager defaultProvider="ClientRoleProvider" enabled="true">
      <providers>
        <add name="ClientRoleProvider" type="System.Web.ClientServices.Providers.ClientRoleProvider, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" serviceUri="" cacheTimeout="86400"/>
      </providers>
    </roleManager>
  </system.web>
  <runtime>
    <!-- added by Spring.net? -->
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="Common.Logging" publicKeyToken="af08829b84f0328e" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-3.4.1.0" newVersion="3.4.1.0"/>
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Common.Logging.Core" publicKeyToken="af08829b84f0328e" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-3.4.1.0" newVersion="3.4.1.0"/>
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
</configuration>
